//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.1 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.04.24 at 08:33:57 PM NOVT 
//


package ru.nsu.plodushcheva.schema;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the generated package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _People_QNAME = new QName("", "people");
    private final static QName _SiblingsTypeSister_QNAME = new QName("", "sister");
    private final static QName _SiblingsTypeBrother_QNAME = new QName("", "brother");
    private final static QName _SiblingsTypeSibling_QNAME = new QName("", "sibling");
    private final static QName _ChildrenTypeSon_QNAME = new QName("", "son");
    private final static QName _ChildrenTypeDaughter_QNAME = new QName("", "daughter");
    private final static QName _ChildrenTypeChild_QNAME = new QName("", "child");
    private final static QName _ParentsTypeFather_QNAME = new QName("", "father");
    private final static QName _ParentsTypeMother_QNAME = new QName("", "mother");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: generated
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link PeopleType }
     * 
     */
    public PeopleType createPeopleType() {
        return new PeopleType();
    }

    /**
     * Create an instance of {@link ParentsType }
     * 
     */
    public ParentsType createParentsType() {
        return new ParentsType();
    }

    /**
     * Create an instance of {@link ChildrenType }
     * 
     */
    public ChildrenType createChildrenType() {
        return new ChildrenType();
    }

    /**
     * Create an instance of {@link SiblingsType }
     * 
     */
    public SiblingsType createSiblingsType() {
        return new SiblingsType();
    }

    /**
     * Create an instance of {@link PersonType }
     * 
     */
    public PersonType createPersonType() {
        return new PersonType();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PeopleType }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link PeopleType }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "people")
    public JAXBElement<PeopleType> createPeople(PeopleType value) {
        return new JAXBElement<PeopleType>(_People_QNAME, PeopleType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "sister", scope = SiblingsType.class)
    public JAXBElement<String> createSiblingsTypeSister(String value) {
        return new JAXBElement<String>(_SiblingsTypeSister_QNAME, String.class, SiblingsType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "brother", scope = SiblingsType.class)
    public JAXBElement<String> createSiblingsTypeBrother(String value) {
        return new JAXBElement<String>(_SiblingsTypeBrother_QNAME, String.class, SiblingsType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "sibling", scope = SiblingsType.class)
    public JAXBElement<String> createSiblingsTypeSibling(String value) {
        return new JAXBElement<String>(_SiblingsTypeSibling_QNAME, String.class, SiblingsType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "son", scope = ChildrenType.class)
    public JAXBElement<String> createChildrenTypeSon(String value) {
        return new JAXBElement<String>(_ChildrenTypeSon_QNAME, String.class, ChildrenType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "daughter", scope = ChildrenType.class)
    public JAXBElement<String> createChildrenTypeDaughter(String value) {
        return new JAXBElement<String>(_ChildrenTypeDaughter_QNAME, String.class, ChildrenType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "child", scope = ChildrenType.class)
    public JAXBElement<String> createChildrenTypeChild(String value) {
        return new JAXBElement<String>(_ChildrenTypeChild_QNAME, String.class, ChildrenType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "father", scope = ParentsType.class)
    public JAXBElement<String> createParentsTypeFather(String value) {
        return new JAXBElement<String>(_ParentsTypeFather_QNAME, String.class, ParentsType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "mother", scope = ParentsType.class)
    public JAXBElement<String> createParentsTypeMother(String value) {
        return new JAXBElement<String>(_ParentsTypeMother_QNAME, String.class, ParentsType.class, value);
    }

}
